"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1],{1670:function(n,a,s){s.r(a),s.d(a,{Head:function(){return i},default:function(){return k}});var e=s(1151),t=s(7294);function p(n){const a=Object.assign({img:"img",h2:"h2",blockquote:"blockquote",p:"p",a:"a",span:"span",ul:"ul",li:"li",h3:"h3",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",h1:"h1"},(0,e.ah)(),n.components);return t.createElement(t.Fragment,null,t.createElement(a.img,{src:"https://redd.one/static/e9c12b1d95e9e01c05f752667efce5b3/426b8/thumbnail.jpg",alt:"mp3"}),"\n",t.createElement(a.h2,null,"介绍"),"\n",t.createElement(a.blockquote,null,"\n",t.createElement(a.p,null,"本文基于最新的 ",t.createElement("strong",null,"webpack v5")," 实现"),"\n"),"\n",t.createElement(a.p,null,t.createElement(a.a,{href:"https://webpack.js.org/",rel:"nofollow noopener noreferrer"},"webpack")," 正在为越来越多的现代前端工具（Create React App, NextJS, Gatsby）提供基础支撑。无论你使用哪一种工具，理解 如何自定义 webpack 配置都将使你受益。尽管 webpack 配置有时候并不是那么容易。"),"\n",t.createElement(a.p,null,"今天我要讨论的是：如何实现一个自定义的 webpack loader。这个主题没有太多的文档可供参考。本文也是基于常用的 loaders 进行逆向工程的结果。"),"\n",t.createElement(a.h2,null,"loader 基础"),"\n",t.createElement(a.p,null,t.createElement(a.a,{href:"https://webpack.js.org/concepts/loaders/",rel:"nofollow noopener noreferrer"},"webpack loader")," 是转换导入模块源代码的函数。\r\n例如："),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token function">cssLoader</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./styles.css"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"webpack 能够将 TypeScript 编译为 JavaScript、转换 SASS 为 CSS、将 JSX 转化为",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">React.createElement</code>'}}),"调用。其实这都是作为 webpack 核心的 loader 的作用。另一方面，webpack 创建了一个源码转化链来确保特定的 loader 在适当的时机被执行。"),"\n",t.createElement(a.p,null,"loader 在 webpack 中的配置如下："),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// webpack.config.js</span>\r\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\r\n  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>\r\n    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>\r\n      <span class="token punctuation">{</span>\r\n        <span class="token comment">// Capture all "*.js" imports,</span>\r\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\r\n        <span class="token comment">// ...and transform them via "babel-loader".</span>\r\n        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'babel-loader\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\r\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\r\n      <span class="token punctuation">{</span>\r\n        <span class="token comment">// Capture all the "*.css" imports,</span>\r\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span>\r\n        <span class="token comment">// ...and transform them via "css-loader".</span>\r\n        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'css-loader\'</span><span class="token punctuation">]</span>\r\n      <span class="token punctuation">}</span>\r\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\r\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\r\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"在上面的配置中，所有导入的",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">*.js</code>'}}),"文件被交给",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">babel-loader</code>'}}),"处理，所有的",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">*.css</code>'}}),"文件被交给",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">css-loader</code>'}}),"处理。对于同一种类型的文件，你可以提供多个 loader 来处理，loader 的应用顺序是从右至左。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token punctuation">{</span>\r\n  <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.ext$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\r\n  <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"third-loader"</span><span class="token punctuation">,</span> <span class="token string">"second-loader"</span><span class="token punctuation">,</span> <span class="token string">"first-loader"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"当你把 loader 看成函数，源代码作为参数时，从右至左更加符合直觉。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token function">third</span><span class="token punctuation">(</span><span class="token function">second</span><span class="token punctuation">(</span><span class="token function">first</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.h2,null,"loader 的一些限制"),"\n",t.createElement(a.p,null,"loader 用于转换代码。与 plugin 不同的是，loader 不会影响编译流程，只是在编译的过程中转换导入的模块代码。"),"\n",t.createElement(a.p,null,"一般来说，除了转换代码以外的事情都可以通过 ",t.createElement(a.a,{href:"https://webpack.js.org/concepts/#plugins",rel:"nofollow noopener noreferrer"},"plugin")," 来完成。plugin 不应该对源代码做任改变，这也是 plugin 区分于 loader 最主要的特征。"),"\n",t.createElement(a.p,null,"loader 有以下一些使用场景："),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"支持特定格式的文件导入（例如：",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">*.graphql</code>'}}),"或者",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">*.prisma</code>'}}),"）"),"\n",t.createElement(a.li,null,"为转换后的文件添加元数据（例如在",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">*.mdx</code>'}}),"文件中插入前言）"),"\n",t.createElement(a.li,null,"修改导入的文件（例如 CSS 样式自动添加前缀）"),"\n"),"\n",t.createElement(a.h2,null,"实现一个自定义 loader"),"\n",t.createElement(a.p,null,"在本文中我们准备实现一个 MP3 loader，这个 loader 可以转换导入的",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">*.mp3</code>'}}),"文件为",t.createElement(a.a,{href:"https://reactjs.org/",rel:"nofollow noopener noreferrer"},"React"),"播放组件。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> AudioPlayer <span class="token keyword">from</span> <span class="token string">\'./audio.mp3\'</span>\r\n\r\n<span class="token keyword">function</span> MyComponent <span class="token punctuation">{</span>\r\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\r\n    <span class="token operator">&lt;</span>AudioPlayer <span class="token operator">/</span><span class="token operator">></span>\r\n  <span class="token punctuation">)</span>\r\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.h2,null,"函数声明"),"\n",t.createElement(a.p,null,"loader 接收源代码作为输入，转化后的源代码作为输出。我们创建",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">mp3-loader.js</code>'}}),"文件并声明一个函数："),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// src/mp3-loader.js</span>\r\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">return</span> source<span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"目前为止， 你的 loader 会原样输出导入的 MP3 文件。"),"\n",t.createElement(a.p,null,"我们使用",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">&lt;audio></code>'}}),"标签来播放导入的音频文件。我们需要知道 MP3 文件在最终生成目录中的路径。将路径提供给",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">&lt;audio></code>'}}),"标签的",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">src</code>'}}),"属性使用。"),"\n",t.createElement(a.p,null,"在 loader 的上下文环境中，可以通过",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">this.resourcePath</code>'}}),"属性来获得导入文件的绝对路径。"),"\n",t.createElement(a.p,null,"例如，对于下面的导入："),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> AudioPlayer <span class="token keyword">from</span> <span class="token string">"./audio.mp3"</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">this.resourcePath</code>'}}),"会包含",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">./audio.mp3</code>'}}),"文件的绝对路径。知道了这些，我们来生成一个同名的 MP3 文件。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// src/mp3-loader.js</span>\r\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token comment">// webpack exposes an absolute path to the imported module</span>\r\n  <span class="token comment">// under the "this.resourcePath" property. Get the file name</span>\r\n  <span class="token comment">// of the imported module. For example:</span>\r\n  <span class="token comment">// "/User/admin/audio.mp3" (this.resourcePath) -> "audio.mp3".</span>\r\n  <span class="token keyword">const</span> filename <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourcePath<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token comment">// Next, create an asset info object.</span>\r\n  <span class="token comment">// webpack uses this object when outputting the build\'s stats,</span>\r\n  <span class="token comment">// so you could see info about the emitted asset.</span>\r\n  <span class="token keyword">const</span> assetInfo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">sourceFilename</span><span class="token operator">:</span> filename <span class="token punctuation">}</span><span class="token punctuation">;</span>\r\n  <span class="token comment">// Finally, emit the imported audio file\'s "source"</span>\r\n  <span class="token comment">// in the webpack\'s build directory using a built-in</span>\r\n  <span class="token comment">// "emitFile" method.</span>\r\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emitFile</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> source<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> assetInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token comment">// For now, return the mp3 binary as-is.</span>\r\n  <span class="token keyword">return</span> source<span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.blockquote,null,"\n",t.createElement(a.p,null,"你需要保持住 webpack 的上下文环境来获得",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">this.resourcePath</code>'}}),"和",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">this.emitFile</code>'}}),"。确保你的 laoder 不是一个箭头函数，使用箭头函数会让你无法获得 webpack 暴露给 loader 的属性和方法。"),"\n"),"\n",t.createElement(a.p,null,"现在音频文件会伴随着 JavaScript 包一起输出。我们继续下一个步骤：在 loader 中返回一个 React 组件。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// src/mp3-loader.js</span>\r\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">const</span> filename <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourcePath<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token keyword">const</span> assetInfo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">sourceFilename</span><span class="token operator">:</span> filename <span class="token punctuation">}</span><span class="token punctuation">;</span>\r\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emitFile</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> source<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> assetInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\r\nimport React from \'react\'\r\nexport default function Player(props) {\r\n  return &lt;audio controls src="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>filename<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" />\r\n}\r\n  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\r\n<span class="token comment">// Mark the loader as raw so that the emitted audio binary</span>\r\n<span class="token comment">// does not get processed in any way.</span>\r\nmodule<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>raw <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.blockquote,null,"\n",t.createElement(a.p,null,"转换后的代码需要的依赖需要内联在生成的字符串中。loader 导入的依赖无法被编译后的代码访问到。"),"\n"),"\n",t.createElement(a.p,null,"loader 函数的输入输出必须是字符串。这就是为啥在字符串中声明了一个 React 组件，包含了 React 的导入语句。现在当我们导入一个 MP3 文件，导入的不再是 MP3 文件本身，而是一个 React 组件。"),"\n",t.createElement(a.p,null,"太棒了！你现在实现了一个将 MP3 文件转化为音频播放组件的 webpack loader。现在我们将它添加到 webpack 配置中以使其能够应用到所有的",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">*.mp3</code>'}}),"文件。"),"\n",t.createElement(a.h2,null,"配置自定义 loader"),"\n",t.createElement(a.p,null,"配置 loader 有两种方式：让 webpack 从本地文件加载或者将 loader 发布成一个常规的依赖。除非你的 loader 足够通用，或者它需要被多个项目使用，否则我强烈建议你从本地文件加载来使用 loader。"),"\n",t.createElement(a.h3,null,"从本地文件加载 loader"),"\n",t.createElement(a.p,null,"在 webpack 配置的",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">resolveLoader</code>'}}),"属性中给 loader 一个别名。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// webpack.config.js</span>\r\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\r\n  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>\r\n    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>\r\n      <span class="token punctuation">{</span>\r\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.mp3$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\r\n        <span class="token comment">// Reference the loader by the same name</span>\r\n        <span class="token comment">// that you aliased in "resolveLoader.alias" below.</span>\r\n        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"babel-loader"</span><span class="token punctuation">,</span> <span class="token string">"mp3-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\r\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\r\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\r\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\r\n  <span class="token literal-property property">resolveLoader</span><span class="token operator">:</span> <span class="token punctuation">{</span>\r\n    <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>\r\n      <span class="token string-property property">"mp3-loader"</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src/mp3-loader.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\r\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\r\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\r\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.blockquote,null,"\n",t.createElement(a.p,null,"因为我们从 mp3-loader 中返回了 JSX，我们需要告诉 webpack 将 JSX 转化为常规的 JavaScript。这就是我们为什么需要在",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">mp3-loader</code>'}}),"之后引入",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">babel-loader</code>'}}),"。（记住 loader 是从右往左执行）。"),"\n"),"\n",t.createElement(a.h3,null,"安装依赖加载 loader"),"\n",t.createElement(a.p,null,"当你发布了一个 loader 到 NPM，你可以像使用其他的 Node.js 依赖一样来使用它。"),"\n",t.createElement(a.blockquote,null,"\n",t.createElement(a.p,null,"loader 的默认命名规则是",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">[name]-loader</code>'}}),"。当你需要发布一个 loader 时，记得这一点。"),"\n"),"\n",t.createElement(a.p,null,"当你发布 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">mp3-loader</code>'}}),"到 NPM 之后，你就可以在项目中使用它了。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js">npm install mp3<span class="token operator">-</span>loader</code></pre></div>'}}),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// webpack.config.js</span>\r\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\r\n  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>\r\n    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>\r\n      <span class="token punctuation">{</span>\r\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.mp3$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\r\n        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"babel-loader"</span><span class="token punctuation">,</span> <span class="token string">"mp3-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\r\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\r\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\r\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\r\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.blockquote,null,"\n",t.createElement(a.p,null,"你不需要手动导入你的 loader，webpack 能够自动在",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">node_modules</code>'}}),"中找到它。"),"\n"),"\n",t.createElement(a.h2,null,"使用你的 loader"),"\n",t.createElement(a.p,null,"为了看到",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">mp3-loader</code>'}}),"的实际效果，运行",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">webpack</code>'}}),"CLI 命令来执行",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">webpack.config.js</code>'}}),"中的配置。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">$ npx webpack\r\nasset audio.mp3 2.38 MiB [compared for emit] [from: src/audio.mp3] (auxiliary name: main)\r\nasset main.js 858 KiB [compared for emit] (name: main)\r\nwebpack 5.37.0 compiled successfully in 1347 ms</code></pre></div>'}}),"\n",t.createElement(a.blockquote,null,"\n",t.createElement(a.p,null,t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">mp3-loader</code>'}}),"的最终代码在这里：",t.createElement(a.a,{href:"https://github.com/Redd-Developer/webpack-custom-loader",rel:"nofollow noopener noreferrer"},"Redd-Developer/webpack-custom-loader")),"\n"),"\n",t.createElement(a.h2,null,"测试你的 loader"),"\n",t.createElement(a.p,null,"既然 loader 依赖于编译时上下文，我推荐在 webpack 编译时进行集成测试。测试用例的期望输出取决于 loader 的实现。"),"\n",t.createElement(a.p,null,"对于",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">mp3-loader</code>'}}),"我们有两点期望：、"),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"编译生成的资源中必须包含导入的 MP3 文件"),"\n",t.createElement(a.li,null,"编译生成的代码必须返回一个音频播放 React 组件"),"\n"),"\n",t.createElement(a.p,null,"我们将以上两点期望反映到测试代码中："),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// test/mp3-loader.test.js</span>\r\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n<span class="token keyword">const</span> <span class="token punctuation">{</span> createFsFromVolume<span class="token punctuation">,</span> Volume <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"memfs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n<span class="token comment">// A custom wrapper to promisify webpack compilation.</span>\r\n<span class="token keyword">function</span> <span class="token function">compileAsync</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\r\n    compiler<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> stats</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\r\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">||</span> stats<span class="token punctuation">.</span><span class="token function">hasErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n        <span class="token keyword">const</span> resolvedError <span class="token operator">=</span> error <span class="token operator">||</span> stats<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token string">"errors-only"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\r\n        <span class="token function">reject</span><span class="token punctuation">(</span>resolvedError<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n      <span class="token punctuation">}</span>\r\n      <span class="token function">resolve</span><span class="token punctuation">(</span>stats<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span>\r\n<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">\'converts "*.mp3" import into an audio player\'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\r\n  <span class="token comment">// Configure a webpack compiler.</span>\r\n  <span class="token keyword">const</span> compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\r\n    <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">"development"</span><span class="token punctuation">,</span>\r\n    <span class="token literal-property property">entry</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../src/index.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\r\n    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>\r\n      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>\r\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\r\n    <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>\r\n      <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>\r\n        <span class="token punctuation">{</span>\r\n          <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.mp3$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\r\n          <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"babel-loader"</span><span class="token punctuation">,</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"../src/mp3-loader.js"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\r\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\r\n        <span class="token punctuation">{</span>\r\n          <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\r\n          <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"babel-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\r\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\r\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\r\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\r\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token comment">// Create an in-memory file system so that the build assets</span>\r\n  <span class="token comment">// are not emitted to disk during test runs.</span>\r\n  <span class="token keyword">const</span> memoryFs <span class="token operator">=</span> <span class="token function">createFsFromVolume</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Volume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  compiler<span class="token punctuation">.</span>outputFileSystem <span class="token operator">=</span> memoryFs<span class="token punctuation">;</span>\r\n  <span class="token comment">// Compile the bundle.</span>\r\n  <span class="token keyword">await</span> <span class="token function">compileAsync</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token comment">// Expect the imported audio file to be emitted alongside the build.</span>\r\n  <span class="token function">expect</span><span class="token punctuation">(</span>compiler<span class="token punctuation">.</span>outputFileSystem<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span><span class="token string">"dist/audio.mp3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token comment">// Expect the compiled code to create an "audio" element in React.</span>\r\n  <span class="token keyword">const</span> compiledCode <span class="token operator">=</span> compiler<span class="token punctuation">.</span>outputFileSystem<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>\r\n    <span class="token string">"dist/index.js"</span><span class="token punctuation">,</span>\r\n    <span class="token string">"utf8"</span>\r\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token function">expect</span><span class="token punctuation">(</span>compiledCode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">\'.createElement(\\\\"audio\\\\"\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.h2,null,"webpack loader 组成"),"\n",t.createElement(a.h3,null,"loader 选项"),"\n",t.createElement(a.p,null,"loader 能接收选项来改变自身的行为。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// webpack.config.js</span>\r\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\r\n  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>\r\n    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>\r\n      <span class="token punctuation">{</span>\r\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.mp3$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\r\n        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>\r\n          <span class="token punctuation">{</span>\r\n            <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"mp3-loader"</span><span class="token punctuation">,</span>\r\n            <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>\r\n              <span class="token literal-property property">maxSizeBytes</span><span class="token operator">:</span> <span class="token number">1000000</span><span class="token punctuation">,</span>\r\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\r\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\r\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\r\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\r\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\r\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\r\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"在上面的 webpack 配置中，我们自定义了一个",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">maxSizeBytes</code>'}}),"选项。",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">options</code>'}}),"选项可以通过",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">this.getOptions()</code>'}}),"获取到："),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// src/mp3-loader.js</span>\r\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>maxSizeBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token comment">// ...parametrize your loader\'s behavior.</span>\r\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.h3,null,"验证选项"),"\n",t.createElement(a.p,null,"验证选项是否合理是一个好的习惯，可以避免很多错误。\r\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">schema-utils</code>'}}),"模块可以用来验证 loader 选项是否合理。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// src/mp3-loader.js</span>\r\n<span class="token keyword">const</span> <span class="token punctuation">{</span> validate <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"schema-utils"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n<span class="token comment">// Describe your loader\'s options in a JSON Schema.</span>\r\n<span class="token keyword">const</span> schema <span class="token operator">=</span> <span class="token punctuation">{</span>\r\n  <span class="token literal-property property">properties</span><span class="token operator">:</span> <span class="token punctuation">{</span>\r\n    <span class="token literal-property property">maxSizeBytes</span><span class="token operator">:</span> <span class="token punctuation">{</span>\r\n      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"number"</span><span class="token punctuation">,</span>\r\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\r\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\r\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\r\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token comment">// Validate the options early in your loader.</span>\r\n  <span class="token function">validate</span><span class="token punctuation">(</span>schema<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token comment">// ...the rest of your loader.</span>\r\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.blockquote,null,"\n",t.createElement(a.p,null,t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">schema</code>'}}),"对象定义使用",t.createElement(a.a,{href:"https://json-schema.org/",rel:"nofollow noopener noreferrer"},"JSON Schema"),"格式."),"\n"),"\n",t.createElement(a.h3,null,"日志"),"\n",t.createElement(a.p,null,"我们来考虑下",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">maxSizeBytes</code>'}}),"选项，当导入的音频文件超出了最大限制时抛出一条警告。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// src/mp3-loader.js</span>\r\n<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token keyword">const</span> logger <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token keyword">const</span> assetStats <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">statSync</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourcePath<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>assetStats<span class="token punctuation">.</span>size <span class="token operator">></span> options<span class="token punctuation">.</span>maxSizeBytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Imported MP3 file is too large!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.blockquote,null,"\n",t.createElement(a.p,null,"了解更多的 ",t.createElement(a.a,{href:"https://webpack.js.org/api/logging/",rel:"nofollow noopener noreferrer"},"webpack 日志接口")),"\n"),"\n",t.createElement(a.h3,null,"上下文属性"),"\n",t.createElement(a.table,null,t.createElement(a.thead,null,t.createElement(a.tr,null,t.createElement(a.th,null,"属性"),t.createElement(a.th,null,"描述"))),t.createElement(a.tbody,null,t.createElement(a.tr,null,t.createElement(a.td,null,"this.resourcePath"),t.createElement(a.td,null,"导入文件的绝对路径")),t.createElement(a.tr,null,t.createElement(a.td,null,"this.rootContext"),t.createElement(a.td,null,"编译",t.createElement(a.a,{href:"https://webpack.js.org/configuration/entry-context/#context",rel:"nofollow noopener noreferrer"},"上下文环境"))))),"\n",t.createElement(a.blockquote,null,"\n",t.createElement(a.p,null,"你可以打印出 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">this</code>'}})," 来查看所有的属性"),"\n"),"\n",t.createElement(a.h3,null,"上下文方法"),"\n",t.createElement(a.table,null,t.createElement(a.thead,null,t.createElement(a.tr,null,t.createElement(a.th,null,"属性"),t.createElement(a.th,null,"描述"))),t.createElement(a.tbody,null,t.createElement(a.tr,null,t.createElement(a.td,null,"this.emitFile()"),t.createElement(a.td,null,"在最终的目标目录中生成一个文件")),t.createElement(a.tr,null,t.createElement(a.td,null,"this.getLogger()"),t.createElement(a.td,null,"获取",t.createElement(a.a,{href:"https://webpack.js.org/api/logging/",rel:"nofollow noopener noreferrer"},"webpack 日志实例"))),t.createElement(a.tr,null,t.createElement(a.td,null,"this.emitWarning()"),t.createElement(a.td,null,"编译时生成一个警告")),t.createElement(a.tr,null,t.createElement(a.td,null,"this.getOptions()"),t.createElement(a.td,null,"获取 loader 选项")))),"\n",t.createElement(a.blockquote,null,"\n",t.createElement(a.p,null,"你可以打印出 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">this</code>'}})," 来查看所有的方法"),"\n"),"\n",t.createElement(a.h2,null,"参考文献"),"\n",t.createElement(a.p,null,"关于 webpack 定制化的文档并不是完善。当我在学习写 webpack loader 的时候，我参考了之前使用过的一些 loader 的实现。下面是一些你可以参考的 loader 列表："),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,t.createElement(a.a,{href:"https://webpack.js.org/loaders/",rel:"nofollow noopener noreferrer"},"Featured webpack loaders")),"\n",t.createElement(a.li,null,t.createElement(a.a,{href:"https://github.com/webpack-contrib/file-loader/",rel:"nofollow noopener noreferrer"},"file-loader")),"\n",t.createElement(a.li,null,t.createElement(a.a,{href:"https://github.com/webpack-contrib/css-loader",rel:"nofollow noopener noreferrer"},"css-loader")),"\n"),"\n",t.createElement(a.h1,null,"本文译自",t.createElement(a.a,{href:"https://redd.one/blog/writing-custom-webpack-loader",rel:"nofollow noopener noreferrer"},"Writing A Custom Webpack Loader")))}var o=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,e.ah)(),n.components);return a?t.createElement(a,n,t.createElement(p,n)):p(n)},l=s(8032),c=s(72),r=s(9357);const u=n=>{let{data:a,children:s}=n;(0,l.c)(a.mdx.frontmatter.hero_image);return t.createElement(c.Z,{pageTitle:a.mdx.frontmatter.title},s)},i=n=>{let{data:a}=n;return t.createElement(r.Z,{title:a.mdx.frontmatter.title})};function k(n){return t.createElement(u,n,t.createElement(o,n))}},1151:function(n,a,s){s.d(a,{ah:function(){return p}});var e=s(7294);const t=e.createContext({});function p(n){const a=e.useContext(t);return e.useMemo((()=>"function"==typeof n?n(a):{...a,...n}),[a,n])}}}]);
//# sourceMappingURL=component---src-pages-blog-mdx-frontmatter-slug-js-content-file-path-blog-post-2022-12-10-mdx-9cfa1c827bbf9c82ade2.js.map