"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[823],{4733:function(n,a,s){s.r(a),s.d(a,{Head:function(){return r},default:function(){return i}});var t=s(1151),p=s(7294);function o(n){const a=Object.assign({h2:"h2",span:"span",p:"p"},(0,t.ah)(),n.components);return p.createElement(p.Fragment,null,p.createElement(a.h2,null,"根据 useState 的定义，写出基础框架"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token parameter">initVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">let</span> _val <span class="token operator">=</span> initVal<span class="token punctuation">;</span>\r\n  <span class="token keyword">const</span> state <span class="token operator">=</span> _val<span class="token punctuation">;</span>\r\n  <span class="token keyword">const</span> <span class="token function-variable function">setState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\r\n    _val <span class="token operator">=</span> newVal<span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\r\n  <span class="token keyword">return</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n<span class="token function">setCount</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"输出:"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">1\r\n1</code></pre></div>'}}),"\n",p.createElement(a.h2,null,"重新暴露内部变量"),"\n",p.createElement(a.p,null,"在上面的代码中，",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">setCount</code>'}})," 修改了内部变量的值，我们把",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">state</code>'}}),"变成一个 getter 函数，重新把内部变量暴露出来。"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token parameter">initVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">let</span> _val <span class="token operator">=</span> initVal<span class="token punctuation">;</span>\r\n  <span class="token keyword">const</span> <span class="token function-variable function">state</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _val<span class="token punctuation">;</span> <span class="token comment">// 最容易的一种方式</span>\r\n  <span class="token keyword">const</span> <span class="token function-variable function">setState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\r\n    _val <span class="token operator">=</span> newVal<span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\r\n  <span class="token keyword">return</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// updated</span>\r\n<span class="token function">setCount</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// updated</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"输出:"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">1\r\n2</code></pre></div>'}}),"\n",p.createElement(a.h2,null,"使用立即执行函数引入 React 模块"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> React <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">function</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token parameter">initVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">let</span> _val <span class="token operator">=</span> initVal<span class="token punctuation">;</span>\r\n    <span class="token keyword">const</span> <span class="token function-variable function">state</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _val<span class="token punctuation">;</span>\r\n    <span class="token keyword">const</span> <span class="token function-variable function">setState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\r\n      _val <span class="token operator">=</span> newVal<span class="token punctuation">;</span>\r\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\r\n    <span class="token keyword">return</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span><span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n\r\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n\r\n<span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n<span class="token function">setCount</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"输出:"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">1\r\n2</code></pre></div>'}}),"\n",p.createElement(a.h2,null,"定义一个",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">HelloWorld</code>'}}),"组件来使用",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useState</code>'}}),":"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n\r\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\r\n    <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//模拟JSX</span>\r\n    <span class="token function-variable function">click</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 模拟点击</span>\r\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(a.h2,null,"教会 React 如何渲染一个组件"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> React <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">function</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token parameter">initVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">let</span> _val <span class="token operator">=</span> initVal<span class="token punctuation">;</span>\r\n    <span class="token keyword">const</span> <span class="token function-variable function">state</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _val<span class="token punctuation">;</span>\r\n    <span class="token keyword">const</span> <span class="token function-variable function">setState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\r\n      _val <span class="token operator">=</span> newVal<span class="token punctuation">;</span>\r\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\r\n    <span class="token keyword">return</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span><span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n\r\n  <span class="token comment">// ===新加一个render函数</span>\r\n  <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">Component</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">const</span> <span class="token constant">C</span> <span class="token operator">=</span> <span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n    <span class="token constant">C</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n    <span class="token keyword">return</span> <span class="token constant">C</span><span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n  <span class="token comment">// ===</span>\r\n\r\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> render <span class="token punctuation">}</span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.h2,null,"重新组织一下目前的代码，并使用 React.render 方法"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> React <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">let</span> _val<span class="token punctuation">;</span> <span class="token comment">// 使_val变成React的私有变量</span>\r\n  <span class="token keyword">function</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token parameter">initVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">const</span> state <span class="token operator">=</span> _val <span class="token operator">||</span> initVal<span class="token punctuation">;</span> <span class="token comment">// 通过useState来访问_val</span>\r\n    <span class="token keyword">const</span> <span class="token function-variable function">setState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\r\n      _val <span class="token operator">=</span> newVal<span class="token punctuation">;</span>\r\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\r\n    <span class="token keyword">return</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span><span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n\r\n  <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">Component</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">const</span> <span class="token constant">C</span> <span class="token operator">=</span> <span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n    <span class="token constant">C</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n    <span class="token keyword">return</span> <span class="token constant">C</span><span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n\r\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> render <span class="token punctuation">}</span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n\r\n<span class="token keyword">function</span> <span class="token function">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n\r\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\r\n    <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">,</span>\r\n    <span class="token function-variable function">click</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\r\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">var</span> App <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>HelloWorld<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\nApp<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n<span class="token keyword">var</span> App <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>HelloWorld<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\nApp<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n<span class="token keyword">var</span> App <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>HelloWorld<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\nApp<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n<span class="token keyword">var</span> App <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>HelloWorld<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\nApp<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n<span class="token keyword">var</span> App <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>HelloWorld<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"输出:"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">1\r\n2\r\n3\r\n4\r\n5</code></pre></div>'}}),"\n",p.createElement(a.p,null,"到目前为止，看上去已经比较完美了。"),"\n",p.createElement(a.h2,null,"组件中使用多个",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">state</code>'}})),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>text<span class="token punctuation">,</span> setText<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//增加一个state</span>\r\n\r\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\r\n    <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">,</span> text <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\r\n    <span class="token function-variable function">click</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\r\n    <span class="token function-variable function">type</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">word</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setText</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 增加一个设置方法</span>\r\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">var</span> App <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>HelloWorld<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\nApp<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n<span class="token keyword">var</span> App <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>HelloWorld<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\nApp<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n<span class="token keyword">var</span> App <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>HelloWorld<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"输出:"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">{count: 1, text: "apple"}\r\n{count：2, text： 2}\r\n{count: "apple", text: "apple"}</code></pre></div>'}}),"\n",p.createElement(a.p,null,"这是由于我们从头到尾都只有一个变量",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">_val</code>'}}),"，接下来我们来解决这个问题。"),"\n",p.createElement(a.h2,null,"引入",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">hooks</code>'}}),"数组和当前索引",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">idx</code>'}})),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> React <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">let</span> hooks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// updated</span>\r\n  <span class="token keyword">let</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// updated</span>\r\n  <span class="token keyword">function</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token parameter">initVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">const</span> state <span class="token operator">=</span> hooks<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">||</span> initVal<span class="token punctuation">;</span> <span class="token comment">//_val被hooks[idx]替代</span>\r\n    <span class="token keyword">const</span> <span class="token function-variable function">setState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\r\n      hooks<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> newVal<span class="token punctuation">;</span> <span class="token comment">//_val被hooks[idx]替代</span>\r\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\r\n    idx<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 每调用一次useState,idx自增1</span>\r\n    <span class="token keyword">return</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span><span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n\r\n  <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">Component</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">const</span> <span class="token constant">C</span> <span class="token operator">=</span> <span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n    <span class="token constant">C</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n    <span class="token keyword">return</span> <span class="token constant">C</span><span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n\r\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> render <span class="token punctuation">}</span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"输出："),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">{count: 1, text: "apple"}\r\n{count：2, text： "apple"}\r\n{count: "pear", text: "apple"}</code></pre></div>'}}),"\n",p.createElement(a.p,null,"看输出还是没有达到我们预期的效果。"),"\n",p.createElement(a.h2,null,"重置",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">idx</code>'}})),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> React <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">let</span> hooks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\r\n  <span class="token keyword">let</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\r\n  <span class="token keyword">function</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token parameter">initVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">const</span> state <span class="token operator">=</span> hooks<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">||</span> initVal<span class="token punctuation">;</span>\r\n    <span class="token keyword">const</span> <span class="token function-variable function">setState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\r\n      hooks<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> newVal<span class="token punctuation">;</span>\r\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\r\n    idx<span class="token operator">++</span><span class="token punctuation">;</span>\r\n    <span class="token keyword">return</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span><span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n\r\n  <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">Component</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//每次render的时候重置idx</span>\r\n    <span class="token keyword">const</span> <span class="token constant">C</span> <span class="token operator">=</span> <span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n    <span class="token constant">C</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n    <span class="token keyword">return</span> <span class="token constant">C</span><span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n\r\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> render <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"输出："),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">{count: 1, text: "apple"}\r\n{count: 1, text: "apple"}\r\n{count: 1, text: "apple"}</code></pre></div>'}}),"\n",p.createElement(a.p,null,"这还是不对，setState 是在 React.render 之后执行，那个时候",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">idx</code>'}}),"已经被重置为 0。"),"\n",p.createElement(a.h2,null,"锁住",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">idx</code>'}}),"的值"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> React <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">let</span> hooks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\r\n  <span class="token keyword">let</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\r\n  <span class="token keyword">function</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token parameter">initVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">const</span> state <span class="token operator">=</span> hooks<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">||</span> initVal<span class="token punctuation">;</span>\r\n    <span class="token keyword">const</span> _idx <span class="token operator">=</span> idx<span class="token punctuation">;</span> <span class="token comment">// updated</span>\r\n    <span class="token keyword">const</span> <span class="token function-variable function">setState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\r\n      hooks<span class="token punctuation">[</span>_idx<span class="token punctuation">]</span> <span class="token operator">=</span> newVal<span class="token punctuation">;</span>\r\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\r\n    idx<span class="token operator">++</span><span class="token punctuation">;</span>\r\n    <span class="token keyword">return</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span><span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n\r\n  <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">Component</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\r\n    <span class="token keyword">const</span> <span class="token constant">C</span> <span class="token operator">=</span> <span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n    <span class="token constant">C</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n    <span class="token keyword">return</span> <span class="token constant">C</span><span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n\r\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> render <span class="token punctuation">}</span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"输出："),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">{count: 1, text: "apple"}\r\n{count: 2, text: "apple"}\r\n{count: 2, text: "pear"}</code></pre></div>'}}),"\n",p.createElement(a.h2,null,"最终使用不到 50 行代码完成了 React.useState()和 demo"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> React <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">let</span> hooks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\r\n  <span class="token keyword">let</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\r\n  <span class="token keyword">function</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token parameter">initVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">const</span> state <span class="token operator">=</span> hooks<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">||</span> initVal<span class="token punctuation">;</span>\r\n    <span class="token keyword">const</span> _idx <span class="token operator">=</span> idx<span class="token punctuation">;</span> <span class="token comment">// updated</span>\r\n    <span class="token keyword">const</span> <span class="token function-variable function">setState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\r\n      hooks<span class="token punctuation">[</span>_idx<span class="token punctuation">]</span> <span class="token operator">=</span> newVal<span class="token punctuation">;</span>\r\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\r\n    idx<span class="token operator">++</span><span class="token punctuation">;</span>\r\n    <span class="token keyword">return</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span><span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n\r\n  <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">Component</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\r\n    <span class="token keyword">const</span> <span class="token constant">C</span> <span class="token operator">=</span> <span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n    <span class="token constant">C</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n    <span class="token keyword">return</span> <span class="token constant">C</span><span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n\r\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> render <span class="token punctuation">}</span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n\r\n<span class="token keyword">function</span> <span class="token function">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>text<span class="token punctuation">,</span> setText<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n\r\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\r\n    <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">,</span> text <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\r\n    <span class="token function-variable function">click</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\r\n    <span class="token function-variable function">type</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">word</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setText</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">,</span>\r\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">var</span> App <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>HelloWorld<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\nApp<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n<span class="token keyword">var</span> App <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>HelloWorld<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\nApp<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n<span class="token keyword">var</span> App <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>HelloWorld<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"输出："),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">{count: 1, text: "apple"}\r\n{count: 2, text: "apple"}\r\n{count: 2, text: "pear"}</code></pre></div>'}}))}var e=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,t.ah)(),n.components);return a?p.createElement(a,n,p.createElement(o,n)):o(n)},c=s(8032),u=s(72),l=s(9357);const k=n=>{let{data:a,children:s}=n;(0,c.c)(a.mdx.frontmatter.hero_image);return p.createElement(u.Z,{pageTitle:a.mdx.frontmatter.title},s)},r=n=>{let{data:a}=n;return p.createElement(l.Z,{title:a.mdx.frontmatter.title})};function i(n){return p.createElement(k,n,p.createElement(e,n))}},1151:function(n,a,s){s.d(a,{ah:function(){return o}});var t=s(7294);const p=t.createContext({});function o(n){const a=t.useContext(p);return t.useMemo((()=>"function"==typeof n?n(a):{...a,...n}),[a,n])}}}]);
//# sourceMappingURL=component---src-pages-blog-mdx-frontmatter-slug-js-content-file-path-blog-post-2021-06-02-mdx-04522693818a5613a7e5.js.map